Permisos directos
##Mejores pr√°cticas
Es mejor asignar permisos a roles y luego asignar roles a usuarios.

Consulte la secci√≥n Roles vs Permisos de los documentos para obtener una explicaci√≥n m√°s detallada.

SIN EMBARGO, si tiene motivos para asignar directamente permisos individuales a usuarios espec√≠ficos (en lugar de roles asignados a esos usuarios), puede hacerlo como se describe a continuaci√≥n:

##Permisos directos a los usuarios
Se puede otorgar un permiso a cualquier usuario:

<?php
$user->givePermissionTo('edit articles');

// Tambi√©n puedes otorgar varios permisos a la vez
$user->givePermissionTo('edit articles', 'delete articles');

// Tambi√©n puedes pasar una matriz
$user->givePermissionTo(['edit articles', 'delete articles']);
?>

Se puede revocar un permiso a un usuario:
üëâ $user->revokePermissionTo('edit articles');

Or revoke & add new permissions in one go:
üëâ $user->syncPermissions(['edit articles', 'delete articles']);

Puede comprobar si un usuario tiene permiso:
üëâ $user->hasPermissionTo('edit articles');

O puede pasar un n√∫mero entero que represente la identificaci√≥n (id) del permiso.

<?php
$user->hasPermissionTo('1');
$user->hasPermissionTo(Permission::find(1)->id);
$user->hasPermissionTo($somePermission->id);
?>

Puede comprobar si un usuario tiene alguno de una serie de permisos:
üëâ$user->hasAnyPermission(['edit articles', 'publish articles', 'unpublish articles']);

...o si un usuario tiene todos los permisos:
üëâ $user->hasAllPermissions(['edit articles', 'publish articles', 'unpublish articles']);

Tambi√©n puede pasar n√∫meros enteros para buscar por ID de permiso.

üëâ $user->hasAnyPermission(['edit articles', 1, 5]);

Como todos los permisos asignados a trav√©s de roles, puedes verificar si un usuario tiene un permiso usando la funci√≥n predeterminada de Laravel:
üëâ $user->can('edit articles');